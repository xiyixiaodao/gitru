# Commit Message Validation Configuration Template
# The Conventional Commits specification is a lightweight convention on top of commit messages.
# For detailed content, please refer to:  https://www.conventionalcommits.org/en/v1.0.0/#summary
# The commit message should be structured as follows:
#
# ╔═════════════════════════════════════════════════╗
# ║          COMMIT FORMAT TEMPLATE                 ║
# ╠═════════════════════════════════════════════════╣
# ║    type(optional scope): subject                ║
# ║                                                 ║
# ║    [optional body]                              ║
# ║                                                 ║
# ║    [optional footer]                            ║
# ║     - BREAKING CHANGE: xxxxx                    ║
# ║     - Closes #issue                             ║
# ╚═════════════════════════════════════════════════╝
#
# Structure explanation:
# 1. type        → Required, commit type (feat/fix/docs etc)
# 2. (scope)     → Optional, scope (wrapped in parentheses)
# 3. : subject   → Required, brief description (space after colon)
# 4. body        → Optional, detailed description (blank line after header)
# 5. footer      → Optional, notes (blank line after body)
#

rules:
  # Type validation module
  type:
    allowed_types:
      - feat # New feature
      - fix # Bug fix
      - docs # Documentation
      - style # Code style
      - refactor # Code refactor
      - test # Test related
      - chore # Maintenance

  # Scope validation module
  scope:
    allowed_scopes:
      - core
      - cli
      - ui
      - docs
      - test

  # Subject validation module
  subject:
    require_space_after_colon: true  #true is default value
    min_length: 5
    max_length: 10